diff --git a/ocs_ci/utility/powernodes.py b/ocs_ci/utility/powernodes.py
index dbd75686..3171cbe8 100644
--- a/ocs_ci/utility/powernodes.py
+++ b/ocs_ci/utility/powernodes.py
@@ -1,6 +1,7 @@
 import logging
 import time
 
+from ocs_ci.framework import config
 from ocs_ci.ocs import constants
 from ocs_ci.ocs.exceptions import UnexpectedBehaviour
 from ocs_ci.ocs.node import wait_for_nodes_status, get_worker_nodes, get_master_nodes
@@ -29,6 +30,10 @@ class PowerNodes(object):
             self.isKVM = True
         else:
             self.isKVM = False
+
+        if "bastion_ip" in config.ENV_DATA:
+            self.isKVM = False
+
         logger.info(f"iskvm check: {self.isKVM}")
 
         self.service = KubeletService()
@@ -168,8 +173,8 @@ class PowerNodes(object):
                 and 'ready' state.
             wait (bool): True if need to wait till the restarted node reaches timeout
         """
-        self.stop_powernodes_machines_powervs(powernode_machines, timeout, wait)
-        self.start_powernodes_machines_powervs(powernode_machines, timeout, wait)
+        for pnode in powernode_machines:
+            self.service.restart(pnode, timeout)
 
     def restart_powernodes_machines(
         self, powernode_machines, timeout, wait, force=True
diff --git a/ocs_ci/utility/service.py b/ocs_ci/utility/service.py
index 2000277c..783f3d59 100644
--- a/ocs_ci/utility/service.py
+++ b/ocs_ci/utility/service.py
@@ -1,4 +1,5 @@
 import logging
+from ocs_ci.framework import config
 from ocs_ci.ocs.exceptions import UnexpectedBehaviour
 from ocs_ci.ocs import constants, node
 from ocs_ci.ocs.node import wait_for_nodes_status
@@ -31,9 +32,14 @@ class Service(object):
         """
         self.service_name = service_name
         self.force = force
+        self.force = True
 
         self.nodes = node.get_node_ip_addresses("InternalIP")
 
+        self.bastion_ip = "127.0.0.1"
+        if "bastion_ip" in config.ENV_DATA:
+            self.bastion_ip = config.ENV_DATA["bastion_ip"]
+
     def verify_service(self, node, action):
         """
         Verify if PowerNode is completely powered off
@@ -48,10 +54,18 @@ class Service(object):
         """
         nodeip = self.nodes[node.name]
         result = exec_cmd(
-            f"ssh core@{nodeip} sudo systemctl is-active {self.service_name}.service",
+            f"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@{self.bastion_ip} ssh core@{nodeip} sudo systemctl is-active {self.service_name}.service",
             ignore_error=True,
         )
-        if result.stdout.lower().rstrip() == action:
+
+        output = result.stdout.lower().rstrip()
+        if INACTIVE in output:
+            output = INACTIVE
+        elif ACTIVE in output:
+            output = ACTIVE
+        elif FAILED in output:
+            output = FAILED
+        if output == action:
             logger.info("Action succeeded.")
             return True
         else:
@@ -70,7 +84,7 @@ class Service(object):
             UnexpectedBehaviour: If service on PowerNode machine is still up
         """
         nodeip = self.nodes[node.name]
-        cmd = f"ssh core@{nodeip} sudo systemctl stop {self.service_name}.service"
+        cmd = f"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@{self.bastion_ip} ssh core@{nodeip} sudo systemctl stop {self.service_name}.service"
         if self.force:
             cmd += " -f"
         result = exec_cmd(cmd)
@@ -101,7 +115,7 @@ class Service(object):
             UnexpectedBehaviour: If service on powerNode machine is still not up
         """
         nodeip = self.nodes[node.name]
-        cmd = f"ssh core@{nodeip} sudo systemctl start {self.service_name}.service"
+        cmd = f"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@{self.bastion_ip} ssh core@{nodeip} sudo systemctl start {self.service_name}.service"
         result = exec_cmd(cmd)
         logger.info(f"Result of start of service {self.service_name} is {result}")
         ret = TimeoutSampler(
@@ -126,7 +140,7 @@ class Service(object):
 
         """
         nodeip = self.nodes[node.name]
-        cmd = f"ssh core@{nodeip} sudo systemctl kill {self.service_name}.service"
+        cmd = f"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@{self.bastion_ip} ssh core@{nodeip} sudo systemctl kill {self.service_name}.service"
         result = exec_cmd(cmd)
         ret = TimeoutSampler(
             timeout=timeout,
@@ -147,7 +161,7 @@ class Service(object):
 
         """
         nodeip = self.nodes[node.name]
-        cmd = f"ssh core@{nodeip} sudo systemctl restart {self.service_name}.service"
+        cmd = f"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@{self.bastion_ip} ssh core@{nodeip} sudo systemctl restart {self.service_name}.service"
         result = exec_cmd(cmd)
         ret = TimeoutSampler(
             timeout=timeout,
@@ -172,7 +186,7 @@ class Service(object):
             (string): 'active' or 'inactive' or 'failed', etc.
         """
         nodeip = self.nodes[node.name]
-        cmd = f"ssh core@{nodeip} sudo systemctl status {self.service_name}.service"
+        cmd = f"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@{self.bastion_ip} ssh core@{nodeip} sudo systemctl status {self.service_name}.service"
         result = exec_cmd(cmd)
         logger.info(f"Result of status of service {self.service_name} is {result}")
         return result.stdout.lower().rstrip()
